{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Developing Flowmapper","text":""},{"location":"#overview","title":"Overview","text":"<p>Flowmapper takes in .dot (Graphviz) files as input and generates a static site that provides interactive architecture diagrams. The code is released as an npm package. The end user typically would point the package to a list of flow files that would then generate a static site that can be run locally or hosted on Github Pages for example.</p>"},{"location":"#prerequisites-and-dependencies","title":"Prerequisites and Dependencies","text":"<ul> <li>Node.js &gt;= 20</li> <li>npm</li> </ul>"},{"location":"#project-setup","title":"Project Setup","text":"<ol> <li>Clone the repository </li> <li>Run <code>npm install</code> to install dependencies  </li> </ol>"},{"location":"#development-and-build-process","title":"Development and Build Process","text":"<ol> <li>Run <code>npm run dev</code> to build and start a dev server  </li> <li>The app will be running at http://localhost:3000</li> <li>Run <code>npm run build</code> to build a static site with sample data provided in <code>statics/data</code></li> <li>Once the build is complete, <code>cd build</code> and <code>npx serve</code> to run a local static site to interact with the diagrams</li> </ol>"},{"location":"#code-organization-and-conventions","title":"Code Organization and Conventions","text":"<ul> <li>The source code is located in <code>src/</code>.  </li> <li>We use purify-ts to handle nullable values and option types in TypeScript and Svelte.</li> <li>Maybe is used for nullable values </li> <li>Either is used for either/or types that can be Left or Right</li> <li>All code is formatted with Prettier and linting is done with ESLint.  </li> <li>Svelte components are located in <code>src/routes/</code> and <code>src/components/</code>.   </li> <li>All API call logic is located in <code>src/lib/</code>.   </li> <li>Application state is managed using Svelte/Stores.   </li> <li>We follow the Feature-branch Git workflow for version control.  </li> <li>Integration tests use Playwright and are located in <code>./tests</code>.</li> <li>Unit tests use vitest and are generally colocated in the <code>./src</code> directory.</li> <li>Utility logic and constants are located in <code>src/utils/</code>.  </li> <li>Translations are located in <code>src/i18n/</code>. We use <code>i18n-svelte</code> and  <code>i18n-util</code> for localization.</li> </ul>"},{"location":"#internal-architecture","title":"Internal Architecture","text":"<p>Read this page for a deep-dive into how Flowmapper works.</p>"},{"location":"#error-handling-approach","title":"Error Handling Approach","text":"<p>Error handling is done mostly using purify-ts with Maybe and Either monads</p>"},{"location":"#contribution-guidelines","title":"Contribution Guidelines","text":"<ul> <li>We use semantic versioning (automatically versioned by Github actions) </li> <li>Hence we need to follow the angular commit conventions when creating PRs (using feat, fix, chore etc for PR titles)</li> </ul>"}]}